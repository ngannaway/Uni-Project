import tkinter as tk
from tkinter import messagebox

# Initialize the main application window
root = tk.Tk()
root.title("Tic Tac Toe")
root.configure(bg="#F5F5F5")  # Light background color

# Define button colors and styles
button_bg_color = "#FFFFFF"
button_hover_color = "#EFEFEF"
x_color = "#FF6F61"
o_color = "#6FA1FF"
font_style = ('Arial', 24, 'bold')

# Create a 3x3 board represented by buttons
buttons = [[None, None, None], [None, None, None], [None, None, None]]
current_player = "X"

# Label to show which player's turn it is
turn_label = tk.Label(root, text="Player X's turn", font=('Arial', 20), bg="#F5F5F5")
turn_label.grid(row=0, column=0, columnspan=3, pady=(10, 0))

def check_winner():
    # Check rows, columns, and diagonals for a win
    for i in range(3):
        if buttons[i][0]["text"] == buttons[i][1]["text"] == buttons[i][2]["text"] != " ":
            return True
        if buttons[0][i]["text"] == buttons[1][i]["text"] == buttons[2][i]["text"] != " ":
            return True

    # Check diagonals
    if buttons[0][0]["text"] == buttons[1][1]["text"] == buttons[2][2]["text"] != " ":
        return True
    if buttons[0][2]["text"] == buttons[1][1]["text"] == buttons[2][0]["text"] != " ":
        return True

    return False

def check_draw():
    return all(button["text"] != " " for row in buttons for button in row)

def on_button_click(row, col):
    global current_player

    # Check if the button is already clicked
    if buttons[row][col]["text"] != " ":
        return

    # Update the button text and color with the current player's mark
    buttons[row][col]["text"] = current_player
    buttons[row][col]["fg"] = x_color if current_player == "X" else o_color

    # Check for a win or draw
    if check_winner():
        messagebox.showinfo("Tic Tac Toe", f"Player {current_player} wins!")
        reset_game()
    elif check_draw():
        messagebox.showinfo("Tic Tac Toe", "It's a draw!")
        reset_game()
    else:
        # Switch player
        current_player = "O" if current_player == "X" else "X"
        turn_label.config(text=f"Player {current_player}'s turn")

def reset_game():
    global current_player
    current_player = "X"
    turn_label.config(text="Player X's turn")
    for row in range(3):
        for col in range(3):
            buttons[row][col]["text"] = " "
            buttons[row][col]["bg"] = button_bg_color
            buttons[row][col]["fg"] = "black"

# Create the Tic Tac Toe grid with styled buttons
for row in range(3):
    for col in range(3):
        button = tk.Button(root, text=" ", font=font_style, width=5, height=2, 
                           bg=button_bg_color, relief="solid",
                           command=lambda row=row, col=col: on_button_click(row, col))
        
        # Configure hover effect
        button.bind("<Enter>", lambda e, b=button: b.config(bg=button_hover_color))
        button.bind("<Leave>", lambda e, b=button: b.config(bg=button_bg_color))
        
        button.grid(row=row+1, column=col, padx=5, pady=5)
        buttons[row][col] = button

# Create a "Reset Game" button below the grid
reset_button = tk.Button(root, text="Reset Game", font=('Arial', 16), bg="#D9D9D9", 
                         command=reset_game)
reset_button.grid(row=4, column=0, columnspan=3, pady=10)

# Run the application
root.mainloop()
